<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jack Collins</title>
    <link>/</link>
    <description>Recent content on Jack Collins</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 03 Feb 2025 20:14:48 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Ansible patching Playbook</title>
      <link>/articles/patching_playbook/</link>
      <pubDate>Mon, 03 Feb 2025 20:14:48 +0100</pubDate>
      
      <guid>/articles/patching_playbook/</guid>
      <description>A couple of years ago I completed the Red Hat Certified Specialist in Ansible Automation course and then took on full onus of patching 600+ Linux servers, where patching was still being done mostly manually.
The solution was of course Ansible, and initially I created a large Playbook on the CLI of our administration server, which worked very well but needed a proper CI/CD solution.
Fast forward a few months and I worked alongside colleagues within Platform Engineering to implement my Playbook in to Git and Visual Studio Code, and then further on I was involved with getting the whole thing covered by Ansible Automation Platform (AAP) and Red Hat Satellite, and triggerable via Azure Devops.</description>
    </item>
    
    <item>
      <title>Some advanced commands for Linux administration</title>
      <link>/articles/advanced_commands/</link>
      <pubDate>Mon, 03 Feb 2025 20:12:48 +0100</pubDate>
      
      <guid>/articles/advanced_commands/</guid>
      <description>I will update this page as I come across more interesting and less-known commands for Linux Administration, for reference.
 Resource Management View the CPU load of a specific process only
top -p $(pgrep -d, appserver)
Limit the CPU usage of a process to 25%
cpulimit -e backup.sh -l 25
Migrate a running process to a different CPU core without restarting it
taskset -p 2 &amp;lt;PID&amp;gt;
Bind a process to specific CPU cores</description>
    </item>
    
    <item>
      <title>A lifestyle that supports a knowledge-based career</title>
      <link>/articles/min_med_tech/</link>
      <pubDate>Sun, 15 Dec 2024 20:15:32 +0100</pubDate>
      
      <guid>/articles/min_med_tech/</guid>
      <description>When it comes to technical careers which revolve around knowledge and critical thinking, most will consider things like education, courses and experience to be the only methods for improvement. But this misses a fundamental fact about work/life balance, in that it works both ways. Managing our diet, stress, brain health and other factors that affect critical thinking can have a huge impact on our ability to be the very best in our careers.</description>
    </item>
    
    <item>
      <title>AWS curl to 169.254.169.254 failing, 401 Unauthorized</title>
      <link>/articles/ec2_imdsv2/</link>
      <pubDate>Wed, 31 Jan 2024 01:00:00 +0100</pubDate>
      
      <guid>/articles/ec2_imdsv2/</guid>
      <description>Scenario Resolution   Scenario As part of my simple bash script to automate AMI creation in EC2, using AWS CLI, a call is made to the &amp;lsquo;special IP address&amp;rsquo; 169.254.169.254 to retrieve the Instance ID for the current EC2 server.
This Instance ID is required in the create-image command I am using, as below, but you may have your own scenarios for using metadata provided by 169.254.169.254.
aws ec2 create-image --instance-id $(curl -s http://169.</description>
    </item>
    
    <item>
      <title>You should use Systemd Timers instead of Cron Jobs</title>
      <link>/articles/cron_vs_systemd/</link>
      <pubDate>Sat, 30 Dec 2023 09:00:11 +0100</pubDate>
      
      <guid>/articles/cron_vs_systemd/</guid>
      <description>What are Cron Jobs? What are Systemd Timers? Why use Systemd over Cron? Systemd Timer Example   What are Cron Jobs? Cron is a job scheduler that has been around on Unix based operating systems for a long time.
It is used to run commands or scripts at specific intervals of time, for example backing up a server via a shell script every Thursday at 9pm.
Cron uses something called the crontab, or Command Run On Table, to store it&amp;rsquo;s jobs, usually located under /var/spool/cron/.</description>
    </item>
    
    <item>
      <title>Useful Pentesting Links</title>
      <link>/articles/pentestinglinks/</link>
      <pubDate>Tue, 25 Jul 2023 09:00:00 +0100</pubDate>
      
      <guid>/articles/pentestinglinks/</guid>
      <description>Last updated : 25/07/2023
A list of useful URLs, for all steps and aspects of a Penetration Test.
This list will be updated as I discover more resources.
If you spot incorrect or broken URLs, or have ideas for additional resources I can add below, feel free to email jackcollins1434@yahoo.com. Thank you.
  Search Engines Reverse Image Searching EXIF Data Location Information Email Address Discovery Password OSINT Usernames &amp;amp; Accounts Specific People Search Phone Numbers   Search Engines Every good OSINT / Reconnaissance has to start somewhere.</description>
    </item>
    
    <item>
      <title>Using AWS Lambda to automate AMI &amp; Snapshots deletion</title>
      <link>/articles/lambda_delete_snapshots/</link>
      <pubDate>Mon, 24 Jul 2023 11:34:11 +0100</pubDate>
      
      <guid>/articles/lambda_delete_snapshots/</guid>
      <description>Scenario Steps  Create IAM Policy Create IAM Role Create Lambda Function Add Cloudwatch Trigger     Scenario Amazon Machine Images are a great way to back up your AWS EC2 instances, for example before patching.
However, there is no easy way to delete the Images afterwards. Each AMI has underlying Elastic Block Store (EBS) Snapshots attached to it, often many, which to delete require you to deregister the AMI and then find each Snapshot to then remove, via the AWS GUI.</description>
    </item>
    
    <item>
      <title>Ansible Bastion / Jumpbox Configuration</title>
      <link>/articles/ansible_bastion/</link>
      <pubDate>Tue, 27 Jun 2023 12:29:42 +0100</pubDate>
      
      <guid>/articles/ansible_bastion/</guid>
      <description>Often we&amp;rsquo;ll want to use Ansible to manage many servers, but some of those servers may not sit on the same area of the network. They might be in a Dematerialized Zone (DMZ) and only be accessible via a Bastion / Jumpbox server.
We can configure the Ansible Server to recognise Jumpbox configuration, so that it runs Ansible Playbooks on the DMZ Server, as though it were directly available;
Configuration  Firstly, make sure SSH keys are set up correctly.</description>
    </item>
    
    <item>
      <title>Ansible asynchronous actions and polling</title>
      <link>/articles/ansible_async_poll/</link>
      <pubDate>Sun, 23 Apr 2023 16:41:40 +0100</pubDate>
      
      <guid>/articles/ansible_async_poll/</guid>
      <description>Ansible will normally run Tasks synchronously, keeping a connection open for the entire time a Task runs.
If we have an especially long running task, for example an apt upgrade/dnf update or a long-running shell script, it may be better to close the connection and then re-establish it every now and then to see if the task has completed.
We might not want connections to stay open for a few reasons;</description>
    </item>
    
    <item>
      <title>Python Basics</title>
      <link>/articles/python_cheatsheet/</link>
      <pubDate>Tue, 18 Apr 2023 06:00:00 +0100</pubDate>
      
      <guid>/articles/python_cheatsheet/</guid>
      <description>Strings Advanced Strings Math Variables TypeError (&amp;ldquo;Can only concatenate str&amp;rdquo;) Functions Booleans (LT, GT, EQ, AND, OR, NOT) Conditional Statements (IF, ELIF, ELSE) Lists Tuples Looping (FOR, WHILE) Importing Modules Dictionaries (Key:Value Pairs) Sockets   Strings print(”Hello, world!”) # Double quotes
print(’Hello, world!’) # Single quotes
print(”This string is “+”awesome!”) # Concatenate
print(’\n’) # New line
print(variable_name) # Print a str variable
print(”””This string runs
multiple lines!”””) # Multi-line string</description>
    </item>
    
  </channel>
</rss>
